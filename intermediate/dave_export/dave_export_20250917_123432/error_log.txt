=== ERROR CONTEXT ===
stage: main

=== TRACEBACK ===
Traceback (most recent call last):
  File "E:\Anaconda\Lib\urllib\request.py", line 1319, in do_open
    h.request(req.get_method(), req.selector, req.data, headers,
    ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
              encode_chunked=req.has_header('Transfer-encoding'))
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "E:\Anaconda\Lib\http\client.py", line 1338, in request
    self._send_request(method, url, body, headers, encode_chunked)
    ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "E:\Anaconda\Lib\http\client.py", line 1384, in _send_request
    self.endheaders(body, encode_chunked=encode_chunked)
    ~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "E:\Anaconda\Lib\http\client.py", line 1333, in endheaders
    self._send_output(message_body, encode_chunked=encode_chunked)
    ~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "E:\Anaconda\Lib\http\client.py", line 1093, in _send_output
    self.send(msg)
    ~~~~~~~~~^^^^^
  File "E:\Anaconda\Lib\http\client.py", line 1037, in send
    self.connect()
    ~~~~~~~~~~~~^^
  File "E:\Anaconda\Lib\http\client.py", line 1003, in connect
    self.sock = self._create_connection(
                ~~~~~~~~~~~~~~~~~~~~~~~^
        (self.host,self.port), self.timeout, self.source_address)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "E:\Anaconda\Lib\socket.py", line 864, in create_connection
    raise exceptions[0]
  File "E:\Anaconda\Lib\socket.py", line 849, in create_connection
    sock.connect(sa)
    ~~~~~~~~~~~~^^^^
ConnectionRefusedError: [WinError 10061] 由于目标计算机积极拒绝，无法连接。

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "E:\PF_CLEAN\.venv\Lib\site-packages\dave_core\datapool\osm_request.py", line 161, in query_osm
    with urlopen(url) as response:  # noqa: S310
         ~~~~~~~^^^^^
  File "E:\Anaconda\Lib\urllib\request.py", line 189, in urlopen
    return opener.open(url, data, timeout)
           ~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^
  File "E:\Anaconda\Lib\urllib\request.py", line 489, in open
    response = self._open(req, data)
  File "E:\Anaconda\Lib\urllib\request.py", line 506, in _open
    result = self._call_chain(self.handle_open, protocol, protocol +
                              '_open', req)
  File "E:\Anaconda\Lib\urllib\request.py", line 466, in _call_chain
    result = func(*args)
  File "E:\Anaconda\Lib\urllib\request.py", line 1348, in http_open
    return self.do_open(http.client.HTTPConnection, req)
           ~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "E:\Anaconda\Lib\urllib\request.py", line 1322, in do_open
    raise URLError(err)
urllib.error.URLError: <urlopen error [WinError 10061] 由于目标计算机积极拒绝，无法连接。>

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "E:\PF_CLEAN\tools\dave_generate_and_register.py", line 549, in main
    res = run_register_only(
        api=api,
    ...<7 lines>...
        nuts_year=args.nuts_year,
    )
  File "E:\PF_CLEAN\tools\dave_generate_and_register.py", line 442, in run_register_only
    grid_data, net, *_ = create_grid(own_area=geom, **create_kw)  # type: ignore
                         ~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "E:\PF_CLEAN\.venv\Lib\site-packages\dave_core\create.py", line 275, in create_grid
    file_exists, file_name = target_area(
                             ~~~~~~~~~~~^
        grid_data,
        ^^^^^^^^^^
    ...<12 lines>...
        waterways=bool("waterways" in geodata or "all" in geodata),
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "E:\PF_CLEAN\.venv\Lib\site-packages\dave_core\geography\target_area.py", line 358, in target_area
    from_osm(
    ~~~~~~~~^
        grid_data,
        ^^^^^^^^^^
    ...<7 lines>...
        progress_step=progress_step,
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "E:\PF_CLEAN\.venv\Lib\site-packages\dave_core\geography\osm_data.py", line 82, in from_osm
    roads = get_osm_data(grid_data, "road", border_buffer, target_geom_buff)
  File "E:\PF_CLEAN\.venv\Lib\site-packages\dave_core\geography\osm_data.py", line 33, in get_osm_data
    data, meta_data = osm_request(data_type=key, area=border)
                      ~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "E:\PF_CLEAN\.venv\Lib\site-packages\dave_core\datapool\osm_request.py", line 41, in osm_request
    data, meta_data = query_osm(osm_type, area, recurse="down", tags=tags)
                      ~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "E:\PF_CLEAN\.venv\Lib\site-packages\dave_core\datapool\osm_request.py", line 168, in query_osm
    sleep(time_delay)
    ~~~~~^^^^^^^^^^^^
KeyboardInterrupt


=== ENV ===
OVERPASS_API_URL=https://overpass.kumi.systems/api/interpreter
OSMNX_OVERPASS_ENDPOINT=https://overpass.kumi.systems/api/interpreter
HTTP_PROXY=http://127.0.0.1:7890
HTTPS_PROXY=http://127.0.0.1:7890
